{"version":3,"sources":["services/blockchain.js","assets/images/logoXL.png","assets/styles/ColorPalette.js","services/blockchainService.js","services/BlockContext.js","components/Header/Header.js","components/WalletInfo/WalletInfo.js","components/TxDetailsTable/TxDetailsTable.js","views/home/Home.js","views/settingsView/Settings.js","views/createTransactionsView/CreateTransactions.js","router/MainRouter.js","App.js","serviceWorker.js","index.js"],"names":["SHA256","require","ec","EC","Transaction","fromAddress","toAddress","amount","this","timestamp","Date","now","toString","signingKey","getPublic","Error","hashTx","calculateHash","sig","sign","signature","toDER","length","keyFromPublic","verify","Block","transactions","previousHash","console","log","hash","nonce","JSON","stringify","difficulty","substring","Array","join","isValid","Blockchain","chain","createGenesisBlock","pendingTransactions","miningReward","miningRewardAddress","rewardTx","push","block","getLatestBlock","mineBlock","transaction","address","balance","trans","txs","tx","i","currentBlock","previousBlock","hasValidTransactions","module","exports","colors","BlockchainService","blockchainInstance","walletKeys","minePendingTransactions","generateWalletKeys","key","genKeyPair","keyObj","publicKey","privateKey","getPrivate","addTransaction","getBalanceOfAddress","BlockContext","React","createContext","initial","Blocks","getBlocks","PendingTxns","getPendingTransactions","BlockProvider","children","useState","blocks","setBlocks","pendingTxns","setPendingTxns","Provider","value","getNewBlocks","newblocks","getPendingTxns","txns","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","color","title","header","backgroundColor","link","textDecoration","Header","classes","numberofpendingtxns","useContext","className","AppBar","position","Toolbar","IconButton","edge","aria-label","src","Logo","alt","style","height","width","Typography","variant","exact","to","activeStyle","Button","size","Badge","anchorOrigin","vertical","horizontal","badgeContent","marginLeft","WalletInfo","open","handleClose","walletInfo","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","whiteSpace","overflow","textOverflow","txndata","DialogActions","onClick","fontSize","fontWeight","autoFocus","styles","tableContainer","marginBottom","tableHead","addressBody","addressCell","maxWidth","cursor","plainCell","TxDetailsTable","linked","setOpen","setWalletInfo","showWalletDetails","e","target","textContent","mybalance","mytxs","getAllTransactionsForWallet","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","item","idx","background","paperStyle","selectedpaperStyle","border","borderColor","textBlock","padding","mainBlockHeader","subBlockHeader","blockBody","paddingLeft","marginTop","Home","isblockSelected","setBlockSelection","setTxnData","Container","overflowX","Grid","container","flexWrap","xs","showTransactions","Divider","Settings","blockchain","TextField","label","margin","placeholder","helperText","type","InputLabelProps","shrink","blockchainService","walletKey","CreateTransactions","txValues","settxValues","updateValue","name","event","reason","disabled","onChange","newTx","signTransaction","pendingtxns","alert","Snackbar","autoHideDuration","elevation","severity","MainRouter","path","App","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c90fbd07.chunk.js","sourcesContent":["const SHA256 =  require('crypto-js/sha256');\nconst EC = require('elliptic').ec;\n\n// Instance of elliptic\nconst ec = new EC('secp256k1');\n\nclass Transaction{\n    /**\n     * \n     * @param {string} fromAddress \n     * @param {string} toAddress \n     * @param {number} amount \n     */\n    constructor(fromAddress, toAddress, amount){\n        this.fromAddress = fromAddress;\n        this.toAddress = toAddress;\n        this.amount = amount;\n        this.timestamp = Date.now();\n    }\n\n    /**\n     * Creates a SHA256 hash of the transaction\n     * \n     * @returns {string}\n     */\n    calculateHash(){\n        return SHA256(this.fromAddress + this.toAddress + this.amount).toString();\n    }\n\n    /**\n     * Signs a transaction with the given signingkey (which is an Elliptic keypair object\n     * that contains private key). The signature is then stored inside the transaction\n     * object and later stored on the blockchain\n     * \n     * @param {string} signingKey \n     */\n    signTransaction(signingKey){\n        // You can only send a transaction from the wallet that is linked to your\n        // key. So here we check if the fromAddress matches the publickey\n        if(signingKey.getPublic('hex') !== this.fromAddress){\n            throw new Error('You cannot sign transactions for other wallets');\n        }\n        const hashTx = this.calculateHash();\n        const sig = signingKey.sign(hashTx, 'base64');\n        this.signature = sig.toDER('hex');\n    }\n\n    /**\n     * Checks if the signature is valid (transaction has not been tampered with).\n     * It uses the fromAddress as the public key.\n     * \n     * @returns {boolean}\n     * \n     */\n    isValid(){\n        // If the transaction doesn't have a from address we assume it's a \n        // mining reward and that it is valid.\n        if(this.fromAddress === null) return true;\n\n        if(!this.signature || this.signature.length === 0){\n            throw new Error('No signature in this transaction');\n        }\n\n        const publicKey = ec.keyFromPublic(this.fromAddress, 'hex');\n        return publicKey.verify(this.calculateHash(), this.signature);\n    }\n}\n\nclass Block{\n    /**\n     * @param {number} timestamp - tells was when the block was created\n     * @param {Transaction[]} transactions - includes any type of transactions that we want to associate with this block(incase of currency, transactions is a transactions of currency)\n     * @param {string} previousHash - includes the hash of the block before\n     */\n    constructor(timestamp, transactions, previousHash=''){\n        console.log('Inside the constructor of Block');\n        this.timestamp = timestamp;\n        this.transactions = transactions;\n        this.previousHash = previousHash;\n        this.hash = this.calculateHash();\n        this.nonce = 0;\n    }\n\n    /**\n     * Returns the SHA256 of this block (by processing all the data stored inside this block)\n     * \n     * @returns {string}\n     */\n    calculateHash(){\n        return SHA256(this.nonce+this.timestamp+this.previousHash+JSON.stringify(this.transactions)).toString()\n    }\n\n    /**\n     * Starts the mining process on the block. It changes the 'nonce' until the \n     * hash of the block starts with enough zeros (= difficulty)\n     * @param {number} difficulty \n     */\n\n    mineBlock(difficulty){\n        while(this.hash.substring(0, difficulty) !== Array(difficulty+1).join(\"0\")){\n            this.nonce++;\n            this.hash = this.calculateHash();\n        }\n        console.log(\"Block mined:\" + this.hash);\n    }\n\n    /**\n     * Validates all the transactions inside this block (signature + hash) and \n     * returns true if everything checks out.\n     * @returns {boolean}\n     */\n    hasValidTransactions(){\n        for(const tx of this.transactions){\n            if(!tx.isValid()){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\nclass Blockchain{\n    constructor(){\n        this.chain = [this.createGenesisBlock()];\n        this.difficulty = 2;\n        this.pendingTransactions = [];\n        this.miningReward = 100;\n    }\n\n    /**\n     * @returns {Block}\n     */\n    createGenesisBlock(){\n        return new Block(Date.now(), \"Genesis Block\", \"0\");\n    }\n\n    /**\n     * Returns the latest block on our chain. Useful when you want to create\n     * new Block and you need the hash of the previous Block.\n     * \n     * @returns {Block[]}\n     */\n    getLatestBlock(){\n        return this.chain[this.chain.length - 1]\n    }\n\n    /**\n     * Takes all the pending transactions, puts them in a Block and starts the\n     * mining process. It also adds a transaction to send the mining reward to the\n     * given address\n     * \n     * @param {string} miningRewardAddress \n     */\n    minePendingTransactions(miningRewardAddress){\n        console.log('Mining pending transaction', miningRewardAddress);\n        const rewardTx = new Transaction(null, miningRewardAddress, this.miningReward);\n        this.pendingTransactions.push(rewardTx);\n\n        const block = new Block(Date.now(), this.pendingTransactions, this.getLatestBlock().hash);\n        block.mineBlock(this.difficulty);\n\n        console.log('Block successfully mined!');\n        this.chain.push(block);\n\n        this.pendingTransactions = [];\n    }\n\n    /**\n     * Add a new transaction to the list of pending transactions (to be added\n     * next time the mining process starts). This verifies that the given\n     * transaction is properly signed.\n     * \n     * @param {Transaction} transaction \n     */\n    addTransaction(transaction){\n        console.log('Adding new transaction');\n        if(!transaction.fromAddress || !transaction.toAddress){\n            throw new Error('Transaction must include from and to address');\n        }\n\n        // Verify the transaction\n        if(!transaction.isValid()){\n            throw new Error('Cannot add invalid transaction to chain');\n        }\n\n        this.pendingTransactions.push(transaction);\n    }\n\n    /**\n     * Returns the balance of a given wallet address.\n     * \n     * @param {string} address \n     * @returns {number} The balance of the wallet\n     */\n    getBalanceOfAddress(address){\n        let balance = 0;\n        console.log('Chain', this.chain);\n        for (const block of this.chain){\n            for(const trans of block.transactions){\n                if(trans.fromAddress === address){\n                    balance -= trans.amount;\n                }\n\n                if(trans.toAddress === address){\n                    balance += trans.amount;\n                }\n            }\n        }\n\n        return balance;\n    }\n\n    /**\n     * Returns a list of all transactions that happened\n     * to and from the given wallet address.\n     * @param {string} address \n     * @returns {Transaction[]}\n     */\n\n    getAllTransactionsForWallet(address){\n        const txs = [];\n        for (const block of this.chain) {\n            for (const tx of block.transactions) {\n              if (tx.fromAddress === address || tx.toAddress === address) {\n                txs.push(tx);\n              }\n            }\n        }\n\n        return txs;\n    }\n\n    /**\n     * Loops over all the blocks in the chain and verify if they are properly\n     * linked together and nobody has tampered with the hashes. By checking \n     * the blocks it also verifies the (signed) transactions inside of them.\n     * \n     * @returns {boolean}\n     */\n    isChainValid(){\n\n        // Checking the remaining blocks on the chain to see ig there hashes and\n        // signatures are correct\n        for(let i  = 1; i < this.chain.length; i++){\n            const currentBlock = this.chain[i];\n            const previousBlock = this.chain[i-1];\n\n            if(!currentBlock.hasValidTransactions()){\n                return false;\n            }\n\n            if(currentBlock.hash !== currentBlock.calculateHash()){\n                return false;\n            }\n\n            if(currentBlock.previousHash !== previousBlock.hash){\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n\nmodule.exports.Blockchain = Blockchain;\nmodule.exports.Transaction = Transaction;","module.exports = __webpack_public_path__ + \"static/media/logoXL.5ebf598e.png\";","// Codes for color Palette\nexport const colors = {\n    primary: ' #336699',\n    primarylight: '#CADCED',\n    secondary: ' #009999',\n    lightText: '#FFFFF0',\n    darkText: '#808080',\n    error: '#CC3333',\n    success: '#41924B',\n    buttonColor: '#62b362',\n    highlight: '#FE8402',\n    background: '#F6FAF9'\n}","const Blockchain = require('./blockchain').Blockchain\nconst EC = require('elliptic').ec;\n\nexport default class BlockchainService{\n    blockchainInstance = new Blockchain();\n    walletKeys = [];\n\n    constructor(){\n        console.log('Inside constructor of blockchainService');\n        this.blockchainInstance.difficulty = 1;\n        this.blockchainInstance.minePendingTransactions('my-wallet-address');\n        this.generateWalletKeys();\n    }\n\n    generateWalletKeys(){\n        console.log('Generating wallet keys');\n        // Instance of elliptic\n        const ec = new EC('secp256k1');\n        // Generating key pair\n        const key = ec.genKeyPair();\n        this.walletKeys.push({\n            keyObj: key,\n            publicKey:key.getPublic('hex'),\n            privateKey:key.getPrivate('hex')\n        })\n    }\n\n    getBlocks(){\n        return this.blockchainInstance.chain;\n    }\n\n    addTransaction(tx){\n        console.log('Adding Transaction', tx);\n        this.blockchainInstance.addTransaction(tx);\n    }\n\n    getPendingTransactions(){\n        console.log('Getting Pending Transaction');\n        return this.blockchainInstance.pendingTransactions;\n    }\n\n    minePendingTransactions(){\n        this.blockchainInstance.minePendingTransactions(this.walletKeys[0].publicKey)\n    }\n\n    getBalanceOfAddress(address){\n        return this.blockchainInstance.getBalanceOfAddress(address);\n    }\n}","import React, {useState} from 'react';\nimport BlockchainService from './blockchainService';\n\n// Creating context object\nexport const BlockContext = React.createContext('No blocks');\n\n// Getting blocks from the blockchain services\nconst initial = new BlockchainService();\nconst Blocks = initial.getBlocks();\nconst PendingTxns = initial.getPendingTransactions();\n\nexport const BlockProvider = ({children}) => {\n    let [blocks, setBlocks] = useState(Blocks)\n    let [pendingTxns, setPendingTxns] = useState(PendingTxns)\n    \n    const getNewBlocks = (newblocks) => {\n        setBlocks(newblocks);\n    }\n\n    const getPendingTxns = (txns) => {\n        setPendingTxns(txns)\n    }\n\n    return (\n        <BlockContext.Provider value={{blocks, getNewBlocks, pendingTxns, getPendingTxns}}>\n            {children}\n        </BlockContext.Provider>\n    );\n}\n\n","import React, { useContext } from 'react';\nimport {NavLink} from 'react-router-dom';\n\n// Importing from Material-UI\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport Badge from '@material-ui/core/Badge';\n\n// Importing assets\nimport { colors } from '../../assets/styles/ColorPalette';\nimport Logo from '../../assets/images/logoXL.png';\n\n\nimport {BlockContext} from '../../services/BlockContext';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    color: colors.primary\n  },\n  title: {\n    flexGrow: 1,\n  },\n  header:{\n      backgroundColor: colors.background\n  },\n  link:{\n    textDecoration: 'none',\n    color: colors.primary\n  }\n}));\n\nconst Header = () => {\n  const classes = useStyles();\n  const { pendingTxns } =useContext(BlockContext);\n  const numberofpendingtxns = pendingTxns.length;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" className={classes.header}>\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <img src={Logo} alt=\"logo\" style={{height: 50, width: 50}} />\n          </IconButton>\n          \n          <Typography variant=\"h6\" className={classes.title}>\n            <NavLink exact to=\"/\" className={classes.link} activeStyle={{ color: colors.secondary}}>\n              Blockchain-Visualization\n            </NavLink>\n          </Typography>\n          \n          <NavLink to=\"/settings\" className={classes.link} activeStyle={{ color: colors.secondary}}>\n            <Button  size=\"small\" variant=\"outlined\" color=\"inherit\"  >Settings</Button>\n          </NavLink>\n          <NavLink to=\"/createtxns\" className={classes.link} activeStyle={{ color: colors.secondary}}>\n            <Badge \n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              badgeContent={numberofpendingtxns} \n              color=\"secondary\"\n            >\n              <Button size=\"small\" variant=\"outlined\" color=\"inherit\" style={{marginLeft: 5}}>Create Transactions</Button>\n            </Badge>\n          </NavLink>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default Header\n","import React from 'react';\n\n// Importing components from Material-UI\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\n\nimport {colors} from '../../assets/styles/ColorPalette';\nimport TxDetailsTable from '../TxDetailsTable';\n\n\nconst WalletInfo = ({open, handleClose, walletInfo}) => {  \n    console.log('Wallet Info', walletInfo);\n    \n    return(\n        <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\" style={{color:colors.secondary}}>{\"Your Wallet Details\"}</DialogTitle>\n        <DialogContent>\n          <div>\n            <p style={{width:'100%', whiteSpace: 'nowrap', overflow: 'hidden',textOverflow: 'ellipsis'}}>Your Wallet Address:<span style={{color:colors.highlight, marginLeft: 5}}>{walletInfo.address}</span></p>\n            <p>Balance: <span style={{color:colors.highlight, marginLeft:5}}>{walletInfo.balance}</span></p>\n          </div>\n          {\n          walletInfo.transactions.length > 0?\n          <TxDetailsTable txndata={walletInfo.transactions} />:\n          <p style={{color: colors.error}}>No transaction details</p>\n          }\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} style={{color: colors.error, fontSize: 18, fontWeight: 'bold'}} autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n}\n\nexport default WalletInfo;","import React, { Fragment, useState, useContext} from 'react';\n\n// Importing from Material-UI\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport { colors } from '../../assets/styles/ColorPalette';\nimport WalletInfo from '../WalletInfo';\nimport {BlockContext} from '../../services/BlockContext';\n\n\nconst styles = {\n    tableContainer:{\n        marginBottom: 40\n    },\n\n    tableHead:{\n        backgroundColor: colors.primary,\n        \n    },\n    addressBody:{\n        width:'100%', \n        whiteSpace: 'nowrap', \n        overflow: 'hidden',\n        textOverflow: 'ellipsis'\n    },\n    addressCell:{\n        maxWidth: '100px', \n        cursor: 'pointer', \n        color:colors.highlight\n    },\n    plainCell:{\n        maxWidth: '100px', \n    }\n}\n\nconst TxDetailsTable = ({txndata, linked}) => {\n    const {blocks} = useContext(BlockContext);\n    \n    const [open, setOpen] = useState(false);\n    const [walletInfo, setWalletInfo] = useState({address:'', balance: '', transactions:[]});\n    \n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const showWalletDetails = (e) => {\n        console.log(e.target.textContent);\n        const mybalance = getBalanceOfAddress(e.target.textContent);\n        const mytxs = getAllTransactionsForWallet(e.target.textContent);\n        console.log('My balance is', mytxs);\n        setWalletInfo({...walletInfo, address:e.target.textContent, balance: mybalance, transactions: mytxs});\n        setOpen(true)\n    }\n\n    const getBalanceOfAddress = (address) => {\n        let balance = 0;\n        for (const block of blocks){\n            for(const trans of block.transactions){\n                if(trans.fromAddress === address){\n                    balance -= trans.amount;\n                }\n\n                if(trans.toAddress === address){\n                    balance += trans.amount;\n                }\n            }\n        }\n\n        return balance;\n    }\n\n    const getAllTransactionsForWallet = (address) => {\n        const txs = [];\n        for (const block of blocks) {\n            for (const tx of block.transactions) {\n              if (tx.fromAddress === address || tx.toAddress === address) {\n                txs.push(tx);\n              }\n            }\n        }\n\n        return txs;\n    }\n\n    return(\n        <Fragment>\n            <TableContainer component={Paper} style={styles.tableContainer}>\n                <Table  aria-label=\"customized table\">\n                    <TableHead style={styles.tableHead}>\n                        <TableRow style={{color:'white'}}>\n                            <TableCell style={{color: colors.lightText}}>#</TableCell>\n                            <TableCell style={{color: colors.lightText}} align=\"center\">From</TableCell>\n                            <TableCell style={{color: colors.lightText}} align=\"center\">To</TableCell>\n                            <TableCell style={{color: colors.lightText}} align=\"center\">Amount</TableCell>\n                            <TableCell style={{color: colors.lightText}} align=\"center\">Timestamp</TableCell>\n                            <TableCell style={{color: colors.lightText}} align=\"center\">Valid?</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {txndata.map((item, idx) => (\n                            <TableRow key={idx+ item.timestamp} style={idx % 2 === 0 ? {background: colors.background}:{background: colors.primarylight}}>\n                                <TableCell>{idx}</TableCell>\n                                <TableCell onClick={linked?showWalletDetails:null} style={linked?styles.addressCell:styles.plainCell}  align=\"center\" ><div style={styles.addressBody}>{item.fromAddress === null ? 'System':item.fromAddress}</div></TableCell>\n                                <TableCell onClick={linked?showWalletDetails:null}style={linked?styles.addressCell:styles.plainCell} align=\"center\"><div style={styles.addressBody}>{item.toAddress}</div></TableCell>\n                                <TableCell align=\"center\">{item.amount}</TableCell>\n                                <TableCell align=\"center\">{item.timestamp}</TableCell>\n                                <TableCell align=\"center\">Yes</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            {   walletInfo &&\n                <WalletInfo open={open} handleClose={handleClose} walletInfo={walletInfo} />\n            }\n        </Fragment> \n               \n    );\n}\n\nexport default TxDetailsTable;","import React, { Fragment, useState, useContext} from 'react';\nimport Header from '../../components/Header';\nimport TxDetailsTable from '../../components/TxDetailsTable';\n\n// Importing from Material-UI\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\n\nimport {BlockContext} from '../../services/BlockContext';\nimport { colors } from '../../assets/styles/ColorPalette';\n\nconst styles = {\n    paperStyle:{\n        height: 375, \n        width: 275,\n        backgroundColor: colors.background,\n        cursor: 'pointer'\n    },\n    selectedpaperStyle:{\n        height: 375, \n        width: 275,\n        backgroundColor: colors.background,\n        cursor: 'pointer',\n        border: '2px solid',\n        borderColor: colors.secondary\n    },\n    textBlock:{\n        padding: '7px 10px'\n    },\n    mainBlockHeader:{\n        fontWeight: 400, \n        padding: '5px 10px'\n    },\n    subBlockHeader:{\n        fontWeight: 400, \n        padding: '5px 10px'\n    },\n    blockBody:{\n        fontSize: 12, \n        color:'red', \n        paddingLeft: 10, \n        marginTop: 0,\n        textOverflow: 'ellipsis',\n        width: '90%',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden' \n    },\n\n    tableContainer:{\n        marginBottom: 40\n    },\n\n    tableHead:{\n        backgroundColor: colors.primary,\n        \n    }\n\n}\n\nconst Home = () => {\n    const {blocks} = useContext(BlockContext)\n    console.log('Obtaing blocks from provider', blocks);\n    //For selection of block\n    const [isblockSelected, setBlockSelection] = useState(0);\n    const [txndata, setTxnData] = useState([]);\n    \n    const showTransactions = (idx, block) => {\n        console.log('Show Transactions', block.transactions)\n        setBlockSelection(idx);\n        setTxnData(block.transactions)\n    }\n\n    \n    return(\n        \n        <Fragment>\n            <Header/>\n            <Container>\n                <h1 style={{fontWeight: 400}}>Blocks on Chain</h1>\n                <p>Each card represents a block on a chain. Click on a block to see the transaction.</p>\n            </Container> \n            <Container style={{overflowX:'auto', height: 400, marginTop: 20}}>\n                <Grid container spacing={2} style={{flexWrap:'nowrap'}}>\n                    {blocks.map((item, idx) => (\n                        <Grid item xs={3} key={idx + item.timestamp}>\n                            <Paper onClick={() => showTransactions(idx, item)} style={idx === isblockSelected?styles.selectedpaperStyle:styles.paperStyle}>\n                                <div style={styles.textBlock}>\n                                    <Typography variant=\"h5\" component=\"h2\" style={styles.mainBlockHeader}>\n                                        Block{item.previousHash ==='0'? <span style={{color: colors.darkText, fontSize: 18, paddingLeft: 2}}>(Genesis block)</span>:idx}\n                                    </Typography>\n                                </div>\n                                <Divider />\n                                <div style={styles.textBlock}>\n                                    <Typography variant=\"subtitle1\" style={styles.subBlockHeader}>\n                                        Hash\n                                    </Typography>\n                                    <p style={{...styles.blockBody, color:\"#\"+item.hash.substring(0,6)}}>{item.hash}</p>\n                                    <Typography variant=\"subtitle1\" style={styles.subBlockHeader}>\n                                        Hash of previous block\n                                    </Typography>\n                                    <p style={{...styles.blockBody, color:\"#\"+item.previousHash.substring(0,6)}}>{item.previousHash}</p>\n                                </div>\n                                <Divider />\n                                <div style={styles.textBlock}>\n                                    <Typography variant=\"subtitle1\" style={styles.subBlockHeader}>\n                                        Nonce\n                                    </Typography>\n                                    <p style={{...styles.blockBody, color:colors.darkText}}>{item.nonce}</p>                                    \n                                </div>\n                                <Divider />\n                                <div style={styles.textBlock}>\n                                    <Typography variant=\"subtitle1\" style={styles.subBlockHeader}>\n                                        Timestamp\n                                    </Typography>\n                                    <p style={{...styles.blockBody, color:colors.darkText}}>{item.timestamp}</p>                                    \n                                </div>\n                            </Paper>\n                        </Grid>\n                    ))\n                    }    \n                </Grid>\n            </Container> \n            <Container>\n                <h1 style={{fontWeight: 400}}>Transactions inside blocks</h1>\n                {isblockSelected === 0 ?\n                    <p style={{color: colors.error}}>This block has no transactions</p>\n                    :\n                    <TxDetailsTable txndata={txndata} linked />\n                }\n            </Container>                 \n        </Fragment>\n        \n            \n        \n    );\n}\n\nexport default Home;\n\n","import React,{Fragment} from 'react';\nimport Header from '../../components/Header';\n\nimport BlockchainService from '../../services/blockchainService';\nimport { colors } from '../../assets/styles/ColorPalette';\n\n// Importing from Material-UI\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nconst Settings = () => {\n\n    const blockchain = new BlockchainService().blockchainInstance;\n\n    // saving settings value\n    const saveSettings = () => {\n        console.log('Saving settings value');\n    }\n    \n    return(\n        <Fragment>\n            <Header />\n            <Container>\n                <h1 style={{fontWeight: 400}}>Settings</h1>\n                <p>Control how the blockchain behaves when new transactions or blocks are created. Changes are saved.</p>\n                <div style={{marginTop: 40}}>\n                    <TextField\n                        id=\"outlined-full-width\"\n                        label=\"Difficulty\"\n                        value= {blockchain.difficulty}\n                        style={{ margin: 8,  width: '50%' }}\n                        placeholder=\"Placeholder\"\n                        helperText=\"Controls how long the mining process takes. Higher number will make mining slower. Default: 2\"\n                        size=\"small\"\n                        type=\"number\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div style={{marginTop: 40}}>\n                    <TextField\n                        id=\"outlined-full-width\"\n                        label=\"Mining Reward\"\n                        style={{ margin: 8,  width: '50%'}}\n                        value={blockchain.miningReward}\n                        placeholder=\"Placeholder\"\n                        helperText=\"How much 'coins' a miner receives for successfully creating a new block for the chain. Default: 100\"\n                        size=\"small\"\n                        type= \"number\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div style={{marginTop: 20, marginBottom: 20}}>\n                    <Button variant=\"contained\" style={{backgroundColor: colors.buttonColor, color: colors.lightText}} onClick={saveSettings}>\n                        Save\n                    </Button>\n                </div>\n            </Container> \n        </Fragment>\n    );\n}\n\nexport default Settings;","import React, {Fragment, useState, useContext} from 'react';\nimport Header from '../../components/Header';\nimport TxDetailsTable from '../../components/TxDetailsTable';\nimport { Link } from 'react-router-dom';\n\n// Importing from Material-UI\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\n\nimport { colors } from '../../assets/styles/ColorPalette';\n\nimport BlockchainService from '../../services/blockchainService';\n\nimport {BlockContext} from '../../services/BlockContext';\n\nconst Transaction = require('../../services/blockchain').Transaction;\n\n// Creating new instance of the blockchain services\nconst blockchainService = new BlockchainService();\n// For handling multiple wallet-keys, handle here\nconst walletKey = blockchainService.walletKeys[0];\n\nconst CreateTransactions = () => {\n    const {getNewBlocks, pendingTxns, getPendingTxns} = useContext(BlockContext);\n    \n    // For handling text-inputs\n    const [txValues, settxValues] = useState({\n        fromAddress: walletKey.publicKey,\n        toAddress: '',\n        amount: ''\n    });\n    \n    // For opening snackbar on successful transaction creation\n    const [open, setOpen] = useState(false);\n    const updateValue = e => {\n        settxValues({\n          ...txValues,\n          [e.target.name]: e.target.value\n        });\n      };\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n          return;\n        }\n    \n        setOpen(false);\n    };\n\n    const createTransaction = () => {\n       console.log('Creating Transaction', txValues);\n       // Creating new transaction and signing it with our key\n       const newTx = new Transaction(txValues.fromAddress, txValues.toAddress, txValues.amount);\n       // Signing the transaction\n       newTx.signTransaction(walletKey.keyObj);\n       // Adding a new transaction\n       try {\n            blockchainService.addTransaction(newTx);\n            settxValues({...txValues, toAddress:'', amount:''})\n            const pendingtxns = blockchainService.getPendingTransactions();\n            console.log('Pending transactions', pendingtxns);\n            if (pendingtxns) {\n                setOpen(true);\n                //setPendingTx(pendingtxns);\n                getPendingTxns(pendingtxns);\n            }\n        } catch (e) {\n            alert(e);\n            return;\n        }\n\n    }\n\n    const mineTransaction = () => {\n        blockchainService.minePendingTransactions();\n        console.log(blockchainService.getBlocks());\n        const newblocks = blockchainService.getBlocks();\n        getNewBlocks(newblocks);\n        getPendingTxns(blockchainService.getPendingTransactions());\n    }\n    \n    return(\n        <Fragment>\n            <Header />\n            <Container>\n                <h1 style={{fontWeight: 400}}>Transactions</h1>\n                <p>Transfer some money, but could be any data</p>\n                <div style={{marginTop: 20}}>\n                    <TextField\n                        id=\"fromAddredd\"\n                        label=\"From Address\"\n                        name=\"fromAddress\"\n                        style={{ margin: 8, width: '50%'}}\n                        helperText=\"This is your wallet address. You cannot change it because you can only spend your own coins.\"\n                        size=\"small\"\n                        value = {walletKey.publicKey}\n                        margin=\"normal\"\n                        disabled\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                    />\n                </div>\n                <div style={{marginTop: 20}}>\n                    <TextField\n                        id=\"toAddress\"\n                        label=\"To Address\"\n                        name=\"toAddress\"\n                        style={{ margin: 8, width: '50%'}}\n                        helperText=\"The address of the wallet where you want to send the money.\"   \n                        size=\"small\"\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        value={txValues.toAddress}\n                        onChange={updateValue}\n                        variant=\"outlined\"\n                    />\n                </div>\n\n                <div style={{marginTop: 20}}>\n                    <TextField\n                        id=\"amount\"\n                        label=\"Amount\"\n                        name= \"amount\"\n                        style={{ margin: 8,  width: '50%'}}\n                        helperText=\"Amount to be transferred\"\n                        size=\"small\"\n                        value={txValues.amount}\n                        margin=\"normal\"\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        variant=\"outlined\"\n                        onChange={updateValue}\n                    />\n                </div>\n\n                <div style={{marginTop: 20, marginBottom: 20}}>\n                <Button variant=\"contained\" style={{backgroundColor: colors.buttonColor, color: colors.lightText}} onClick={createTransaction}>\n                    Sign & Create Transaction\n                </Button>\n                <Snackbar\n                    anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                    }}\n                    open={open}\n                    autoHideDuration={6000}\n                    onClose={handleClose}\n                >\n                    <MuiAlert onClose={handleClose} elevation={6} variant=\"filled\" color=\"info\" severity=\"success\">\n                        Transaction successfully signed, created, and added in pending transactions list.\n                    </MuiAlert>\n                </Snackbar>\n                </div>\n                <h1 style={{fontWeight: 400}}>Pending Transactions</h1>\n                {pendingTxns.length > 0?\n                    <div>\n                        <p>Following are your pending transactions</p>\n                        <TxDetailsTable txndata={pendingTxns} />\n                        <Link to=\"/\" style={{textDecoration: 'none'}}>\n                            <Button variant=\"contained\" style={{backgroundColor: colors.buttonColor, color: colors.lightText, marginBottom: 20}} onClick={mineTransaction}>\n                                Start Mining\n                            </Button>\n                        </Link>\n                    </div>\n                    :\n                    <p style={{color: colors.error}}>You don't have any pending transactions</p>\n                }\n            </Container>\n        </Fragment>\n    );\n}\n\nexport default CreateTransactions;\n\n\n","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport Home from '../views/home';\nimport Settings from '../views/settingsView';\nimport CreateTransactions from '../views/createTransactionsView';\nimport {BlockProvider} from '../services/BlockContext';\n\nconst MainRouter = () => {\n    return(\n        <BlockProvider>\n        <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/settings\" component={Settings} />\n            <Route path=\"/createtxns\" component={CreateTransactions} />\n        </Switch>\n        </BlockProvider>\n    )\n    \n}\n\nexport default MainRouter;","import React from 'react';\nimport MainRouter from './router';\nimport { BrowserRouter} from 'react-router-dom';\n\n\nconst App = () => {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <MainRouter />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}